import { SignInButton, useAuth } from "@clerk/nextjs";
import { useEffect, useState, Suspense, useRef } from 'react';
import { Canvas, useFrame, useThree, useLoader } from '@react-three/fiber';
import { OrbitControls, Environment, AccumulativeShadows, RandomizedLight } from '@react-three/drei';
import { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader';
import * as THREE from 'three';
import { useRouter } from 'next/router';

function Model({ url }) {
  const fbx = useLoader(FBXLoader, url);

  useEffect(() => {
    if (fbx) {
      fbx.traverse((child) => {
        if (child.isMesh) {
          child.castShadow = true;
          child.receiveShadow = true;
          if (child.material) {
            child.material.color = new THREE.Color(0xFFDD99);
          }
        }
      });
    }
  }, [fbx]);

  return fbx ? <primitive object={fbx} scale={0.1} /> : null;
}

function CameraController() {
  const { camera, scene } = useThree();
  const controlsRef = useRef();

  useEffect(() => {
    if (controlsRef.current) {
      camera.position.set(-7, 7, 7);
      camera.lookAt(scene.position);
      controlsRef.current.update();
    }
  }, [camera, scene]);

  useFrame(() => {
    if (controlsRef.current) {
      controlsRef.current.update();
    }
  });

  return (
    <OrbitControls
      ref={controlsRef}
      enableZoom={false}
      enablePan={false}
      minPolarAngle={Math.PI / 4}
      maxPolarAngle={Math.PI / 2}
    />
  );
}

function ThreeScene({ modelUrl }) {
  return (
    <Canvas shadows style={{ width: '400px', height: '400px' }}>
      <CameraController />
      <ambientLight intensity={1} />
      <directionalLight
        position={[50, 50, 50]}
        intensity={2}
        castShadow
        shadow-mapSize-width={1024}
        shadow-mapSize-height={1024}
      />
      <Suspense fallback={null}>
        <Model url={modelUrl} />
        <Environment preset="studio" background={false} />
      </Suspense>
    </Canvas>
  );
}

export default function Landing() {
  const { isLoaded, userId } = useAuth();
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [modelUrl, setModelUrl] = useState('');

  useEffect(() => {
    if (isLoaded && userId) {
      setIsLoading(true);
      router.push('/home');
    }
    setModelUrl('/models/Beaver.fbx');
  }, [isLoaded, userId, router]);

  if (!isLoaded || isLoading) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center bg-gray-100">
        <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-blue-500"></div>
        <p className="mt-4 text-xl font-semibold">Loading...</p>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex flex-col items-center justify-center" style={{ backgroundImage: 'url("/mainback.png")', backgroundSize: 'cover', backgroundPosition: 'center' }}>
      <svg width="385" height="326" viewBox="0 0 385 326" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M85.5805 134.488C82.0995 133.966 78.6599 133.167 75.2619 132.091C71.852 131.095 68.6815 129.851 65.7502 128.359C62.8309 126.789 60.2636 125.029 58.0483 123.079C56.7666 121.916 55.9497 120.62 55.5976 119.192C55.2455 117.764 55.2435 116.429 55.5916 115.187C56.0307 113.877 56.717 112.807 57.6505 111.977C58.675 111.079 59.838 110.606 61.1395 110.559C62.4409 110.511 63.772 111.075 65.1328 112.25C68.3054 114.829 71.7588 116.884 75.493 118.414C79.2273 119.945 83.2305 121.031 87.5027 121.672C93.7528 122.609 98.4562 122.263 101.613 120.633C104.781 118.924 106.615 116.408 107.113 113.085C107.528 110.316 106.826 107.986 105.007 106.096C103.266 104.217 100.02 102.395 95.2694 100.631L82.6248 95.9436C75.3462 93.234 70.1265 89.7412 66.9658 85.4651C63.896 81.1218 62.8239 75.8646 63.7494 69.6936C64.3308 65.817 65.65 62.415 67.7069 59.4877C69.7639 56.5604 72.3884 54.1632 75.5807 52.296C78.8521 50.4407 82.5546 49.2163 86.6883 48.6229C90.9131 47.9622 95.4384 47.9937 100.264 48.7175C105.011 49.4295 109.432 50.6992 113.526 52.5266C117.62 54.3541 121.196 56.6701 124.254 59.4747C125.39 60.5348 126.06 61.7275 126.266 63.0526C126.551 64.3897 126.48 65.6733 126.052 66.9036C125.637 68.0547 124.929 69.0001 123.928 69.7399C122.927 70.4796 121.743 70.8277 120.374 70.7843C119.084 70.7526 117.68 70.1375 116.161 68.939C113.483 66.8385 110.694 65.2068 107.795 64.0439C104.895 62.881 101.705 62.0385 98.2236 61.5164C94.5843 60.9706 91.3821 61.0161 88.617 61.6531C85.852 62.29 83.615 63.4511 81.9062 65.1362C80.2883 66.7542 79.2895 68.829 78.9098 71.3607C78.4827 74.2088 79.088 76.6455 80.7257 78.6708C82.3753 80.617 85.4232 82.4089 89.8695 84.0465L102.395 88.716C109.979 91.5521 115.402 95.0351 118.666 99.1648C122.008 103.306 123.235 108.344 122.345 114.278C121.775 118.075 120.468 121.398 118.423 124.246C116.457 127.106 113.844 129.424 110.585 131.201C107.404 132.989 103.708 134.173 99.4949 134.755C95.282 135.337 90.6439 135.248 85.5805 134.488ZM155.065 144.667C152.612 144.299 150.814 143.342 149.671 141.795C148.619 140.181 148.276 138.148 148.644 135.695L158.255 71.612L135.114 68.1413C133.057 67.8328 131.519 67.0358 130.498 65.7502C129.568 64.3973 129.252 62.732 129.548 60.7541C129.857 58.6971 130.642 57.2374 131.904 56.375C133.257 55.4454 134.962 55.1348 137.019 55.4433L198.491 64.6629C200.548 64.9714 202.047 65.7625 202.989 67.0363C204.021 68.2428 204.383 69.8745 204.075 71.9315C203.778 73.9094 202.948 75.4027 201.583 76.4114C200.309 77.3529 198.644 77.6694 196.587 77.3609L173.446 73.8902L163.834 137.973C163.467 140.426 162.543 142.269 161.064 143.504C159.596 144.659 157.596 145.046 155.065 144.667ZM233.127 156.617C227.351 155.751 222.361 154.234 218.156 152.066C214.03 149.911 210.684 147.144 208.116 143.765C205.561 140.308 203.864 136.252 203.025 131.596C202.186 126.94 202.206 121.685 203.084 115.83L209.474 73.2266C209.865 70.6158 210.789 68.7724 212.245 67.6964C213.779 66.6323 215.773 66.2841 218.226 66.6519C220.678 67.0198 222.443 67.9315 223.519 69.3872C224.674 70.8548 225.055 72.894 224.664 75.5048L218.292 117.99C217.165 125.506 218.017 131.417 220.85 135.725C223.773 139.966 228.518 142.578 235.085 143.563C241.651 144.548 246.914 143.436 250.874 140.228C254.845 136.941 257.395 131.539 258.522 124.023L264.894 81.5384C265.286 78.9276 266.209 77.0842 267.665 76.0083C269.2 74.9441 271.193 74.596 273.646 74.9638C276.019 75.3198 277.744 76.2256 278.82 77.6813C279.975 79.1489 280.357 81.188 279.965 83.7988L273.576 126.402C272.413 134.156 270.089 140.481 266.604 145.378C263.198 150.287 258.683 153.695 253.058 155.602C247.445 157.43 240.801 157.768 233.127 156.617ZM291.607 164.174C288.996 163.783 287.079 162.808 285.857 161.249C284.725 159.624 284.356 157.505 284.747 154.894L294.874 87.3697C295.266 84.7589 296.235 82.8818 297.782 81.7386C299.419 80.5281 301.544 80.1186 304.154 80.5102L327.177 83.9631C341.18 86.0633 351.44 91.2827 357.955 99.6213C364.549 107.972 366.838 118.872 364.821 132.321C363.812 139.046 361.927 144.871 359.166 149.796C356.496 154.654 352.996 158.578 348.664 161.568C344.412 164.571 339.414 166.612 333.67 167.692C328.017 168.705 321.67 168.683 314.629 167.627L291.607 164.174ZM300.614 152.663L315.566 154.906C320.471 155.641 324.793 155.683 328.531 155.03C332.36 154.31 335.64 152.941 338.369 150.924C341.19 148.839 343.466 146.066 345.199 142.605C346.943 139.064 348.183 134.841 348.919 129.936C350.39 120.126 349.075 112.446 344.972 106.896C340.87 101.346 333.993 97.8476 324.341 96.4L309.388 94.1574L300.614 152.663Z" fill="#F7F5ED"/>
        <g filter="url(#filter0_d_110_333)">
        <path d="M26.9143 263C23.6143 263 21.0643 262.15 19.2643 260.45C17.5643 258.65 16.7143 256.1 16.7143 252.8V167.45C16.7143 164.15 17.5643 161.65 19.2643 159.95C21.0643 158.15 23.6143 157.25 26.9143 157.25H62.9143C70.3143 157.25 76.6143 158.35 81.8143 160.55C87.0143 162.75 90.9643 165.9 93.6643 170C96.4643 174.1 97.8643 179 97.8643 184.7C97.8643 191.1 96.0143 196.5 92.3143 200.9C88.6143 205.3 83.5643 208.25 77.1643 209.75V207.5C84.5643 208.6 90.3143 211.4 94.4143 215.9C98.5143 220.4 100.564 226.25 100.564 233.45C100.564 242.85 97.3643 250.15 90.9643 255.35C84.6643 260.45 75.8643 263 64.5643 263H26.9143ZM35.1643 248.45H62.1643C68.9643 248.45 73.9643 247.15 77.1643 244.55C80.3643 241.85 81.9643 237.85 81.9643 232.55C81.9643 227.15 80.3643 223.15 77.1643 220.55C73.9643 217.95 68.9643 216.65 62.1643 216.65H35.1643V248.45ZM35.1643 202.1H59.6143C66.2143 202.1 71.1143 200.85 74.3143 198.35C77.6143 195.75 79.2643 191.95 79.2643 186.95C79.2643 181.95 77.6143 178.2 74.3143 175.7C71.1143 173.1 66.2143 171.8 59.6143 171.8H35.1643V202.1ZM160.636 264.5C153.336 264.5 146.886 263.55 141.286 261.65C135.786 259.75 131.136 256.95 127.336 253.25C123.536 249.45 120.686 244.75 118.786 239.15C116.886 233.55 115.936 227.05 115.936 219.65V165.8C115.936 162.5 116.736 160.05 118.336 158.45C120.036 156.85 122.436 156.05 125.536 156.05C128.636 156.05 130.986 156.85 132.586 158.45C134.286 160.05 135.136 162.5 135.136 165.8V219.5C135.136 229 137.286 236.15 141.586 240.95C145.986 245.65 152.336 248 160.636 248C168.936 248 175.236 245.65 179.536 240.95C183.836 236.15 185.986 229 185.986 219.5V165.8C185.986 162.5 186.786 160.05 188.386 158.45C190.086 156.85 192.486 156.05 195.586 156.05C198.586 156.05 200.886 156.85 202.486 158.45C204.186 160.05 205.036 162.5 205.036 165.8V219.65C205.036 229.45 203.336 237.7 199.936 244.4C196.636 251.1 191.686 256.15 185.086 259.55C178.486 262.85 170.336 264.5 160.636 264.5ZM234.328 263C231.028 263 228.478 262.15 226.678 260.45C224.978 258.65 224.128 256.1 224.128 252.8V167.45C224.128 164.15 224.978 161.65 226.678 159.95C228.478 158.15 231.028 157.25 234.328 157.25H263.428C281.128 157.25 294.778 161.8 304.378 170.9C314.078 180 318.928 193.05 318.928 210.05C318.928 218.55 317.678 226.1 315.178 232.7C312.778 239.2 309.178 244.7 304.378 249.2C299.678 253.7 293.878 257.15 286.978 259.55C280.178 261.85 272.328 263 263.428 263H234.328ZM243.328 247.1H262.228C268.428 247.1 273.778 246.35 278.278 244.85C282.878 243.25 286.678 240.95 289.678 237.95C292.778 234.85 295.078 231 296.578 226.4C298.078 221.7 298.828 216.25 298.828 210.05C298.828 197.65 295.778 188.4 289.678 182.3C283.578 176.2 274.428 173.15 262.228 173.15H243.328V247.1Z" fill="#FCEFB7"/>
        </g>
        <defs>
        <filter id="filter0_d_110_333" x="0.713867" y="144.05" width="334.214" height="140.45" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
        <feFlood flood-opacity="0" result="BackgroundImageFix"/>
        <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
        <feOffset dy="4"/>
        <feGaussianBlur stdDeviation="8"/>
        <feComposite in2="hardAlpha" operator="out"/>
        <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0"/>
        <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_110_333"/>
        <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_110_333" result="shape"/>
        </filter>
        </defs>
      </svg>

      <div className="mt-8 ml-[-50px]">
        {modelUrl && <ThreeScene modelUrl={modelUrl} />}
      </div>
      
      <div className="mt-[0px]">
        <p className="text-[#FCEFB7] text-[40px] font-bold">Building Knowledge, One Log at a Time!</p>
      </div>
      <div className="absolute top-[44px] right-[100px]">
      <SignInButton mode="modal" afterSignInUrl="/home">
        <button className="bg-[#F7F5ED] hover:bg-[#FCEFB7] text-black  w-[94px] h-[40px] rounded-[100px]">
          Log In
        </button>
      </SignInButton>
   
      </div>
    </div>
  );
}